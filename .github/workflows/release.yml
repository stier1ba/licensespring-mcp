name: Release and Publish

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  # Check if we should create a release
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      release-type: ${{ steps.check.outputs.release-type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for release triggers
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "release-type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            # Check commit messages for release keywords
            COMMIT_MSG=$(git log -1 --pretty=%B)
            if [[ "$COMMIT_MSG" =~ \[release\] ]]; then
              echo "should-release=true" >> $GITHUB_OUTPUT
              if [[ "$COMMIT_MSG" =~ \[major\] ]]; then
                echo "release-type=major" >> $GITHUB_OUTPUT
              elif [[ "$COMMIT_MSG" =~ \[minor\] ]]; then
                echo "release-type=minor" >> $GITHUB_OUTPUT
              else
                echo "release-type=patch" >> $GITHUB_OUTPUT
              fi
            else
              echo "should-release=false" >> $GITHUB_OUTPUT
            fi
          fi

  # Run tests before release
  test:
    needs: check-release
    if: needs.check-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build project
        run: npm run build

      - name: Run comprehensive tests
        run: node tests/comprehensive-test.js

  # Create release and publish to NPM
  release:
    needs: [check-release, test]
    if: needs.check-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Bump version
        id: version
        run: |
          RELEASE_TYPE="${{ needs.check-release.outputs.release-type }}"
          OLD_VERSION=$(node -p "require('./package.json').version")
          npm version $RELEASE_TYPE --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "old-version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG
        run: |
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Create changelog entry
          cat > temp_changelog.md << EOF
          # Changelog
          
          ## [$NEW_VERSION] - $DATE
          
          ### Added
          - Automated release and versioning system
          - Enhanced MCP server functionality
          
          ### Changed
          - Improved API coverage and feature parity
          
          ### Fixed
          - Various bug fixes and improvements
          
          EOF
          
          # Append existing changelog if it exists
          if [ -f CHANGELOG.md ]; then
            tail -n +2 CHANGELOG.md >> temp_changelog.md
          fi
          
          mv temp_changelog.md CHANGELOG.md

      - name: Commit version bump
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.version.outputs.new-version }} [skip ci]"
          git tag ${{ steps.version.outputs.tag }}

      - name: Push changes
        run: |
          git push origin ${{ github.ref_name }}
          git push origin ${{ steps.version.outputs.tag }}

      - name: Generate release notes
        id: release-notes
        run: |
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          OLD_VERSION="${{ steps.version.outputs.old-version }}"
          
          # Generate release notes from commits
          RELEASE_NOTES=$(git log v$OLD_VERSION..HEAD --pretty=format:"- %s" --no-merges | head -20)
          
          cat > release_notes.md << EOF
          ## What's Changed
          
          $RELEASE_NOTES
          
          ## Installation
          
          \`\`\`bash
          npm install @tfedorko/licensespring-mcp-server@$NEW_VERSION
          \`\`\`
          
          ## Usage
          
          See the [README](https://github.com/stier1ba/licensespring-mcp/blob/main/README.md) for detailed usage instructions.
          
          **Full Changelog**: https://github.com/stier1ba/licensespring-mcp/compare/v$OLD_VERSION...v$NEW_VERSION
          EOF

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.new-version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.new-version, '-') }}

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Verify package contents
          npm pack --dry-run
          
          # Publish to NPM
          if [[ "${{ steps.version.outputs.new-version }}" == *"-"* ]]; then
            npm publish --tag beta
          else
            npm publish
          fi

      - name: Update package distribution info
        run: |
          echo "✅ Package published successfully!"
          echo "📦 Package: @tfedorko/licensespring-mcp-server@${{ steps.version.outputs.new-version }}"
          echo "🔗 NPM: https://www.npmjs.com/package/@tfedorko/licensespring-mcp-server"
          echo "📋 Install: npm install @tfedorko/licensespring-mcp-server@${{ steps.version.outputs.new-version }}"

  # Notify on success/failure
  notify:
    needs: [check-release, test, release]
    if: always() && needs.check-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Notify Success
        if: needs.release.result == 'success'
        run: |
          echo "🎉 Release completed successfully!"
          echo "📦 New version published to NPM"
          echo "🏷️ GitHub release created"

      - name: Notify Failure
        if: needs.release.result == 'failure'
        run: |
          echo "❌ Release failed!"
          echo "Please check the workflow logs for details"
          exit 1
